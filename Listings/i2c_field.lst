C51 COMPILER V9.60.0.0   I2C_FIELD                                                         01/25/2023 18:46:09 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE I2C_FIELD
OBJECT MODULE PLACED IN .\Objects\i2c_field.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE i2c_field.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings
                    -\i2c_field.lst) TABS(2) OBJECT(.\Objects\i2c_field.obj)

line level    source

   1          /* i2c_field */
   2          #include "header.h"
   3          void delay(int ms);
   4          
   5          sbit SCL = P3 ^ 2;
   6          sbit SDA = P3 ^ 3;
   7          
   8          void i2c_start(void)
   9          {
  10   1        SCL = 1;
  11   1        SDA = 1;
  12   1        SDA = 0;
  13   1      }
  14          
  15          void i2c_stop(void)
  16          {
  17   1        SCL = 0;
  18   1        SDA = 0;
  19   1        SCL = 1;
  20   1        SDA = 1;
  21   1      }
  22          
  23          bit i2c_ack(void)
  24          {
  25   1        SCL = 0;
  26   1        SDA = 1;
  27   1        SCL = 1;
  28   1        delay(10);
  29   1        if (SDA == 0)
  30   1        {
  31   2          SCL = 0;
  32   2          return 0;
  33   2        }
  34   1        else
  35   1        {
  36   2          SCL = 0;
  37   2          return 1;
  38   2        }
  39   1      }
  40          
  41          void i2c_write(unsigned char d)
  42          {
  43   1        char i;
  44   1        for (i = 7; i >= 0; i--)
  45   1        {
  46   2          SCL = 0;
  47   2          SDA = (d >> i) & 1;
  48   2          SCL = 1;
  49   2        }
  50   1      }
  51          
  52          unsigned char i2c_read(void)
  53          {
  54   1        unsigned char temp = 0;
C51 COMPILER V9.60.0.0   I2C_FIELD                                                         01/25/2023 18:46:09 PAGE 2   

  55   1        char i;
  56   1        for (i = 7; i >= 0; i--)
  57   1        {
  58   2          SCL = 1;
  59   2          if (SDA == 1)
  60   2            temp |= (1 << i);
  61   2          SCL = 0;
  62   2        }
  63   1        return temp;
  64   1      }
  65          
  66          void i2c_nack(void)
  67          {
  68   1        SCL = 0;
  69   1        SDA = 1;
  70   1        SCL = 1;
  71   1      }
  72          
  73          void i2c_byte_write(unsigned char SA, unsigned char MA, unsigned char d)
  74          {
  75   1        bit r;
  76   1      
  77   1        i2c_start();
  78   1      
  79   1        i2c_write(SA);
  80   1      
  81   1        r = i2c_ack();
  82   1        if (r == 1)
  83   1          goto check;
  84   1      
  85   1        i2c_write(MA);
  86   1      
  87   1        r = i2c_ack();
  88   1        if (r == 1)
  89   1          goto check;
  90   1      
  91   1        i2c_write(d);
  92   1      
  93   1        r = i2c_ack();
  94   1        if (r == 1)
  95   1          goto check;
  96   1      
  97   1      check:
  98   1        i2c_stop();
  99   1      }
 100          
 101          int i2c_byte_read(unsigned char SA, unsigned char MA)
 102          {
 103   1      
 104   1        bit r;
 105   1      
 106   1        int temp = -1;
 107   1        i2c_start();
 108   1        i2c_write(SA);
 109   1      
 110   1        r = i2c_ack();
 111   1        if (r == 1)
 112   1          goto stop;
 113   1      
 114   1        i2c_write(MA);
 115   1        r = i2c_ack();
 116   1        if (r == 1)
C51 COMPILER V9.60.0.0   I2C_FIELD                                                         01/25/2023 18:46:09 PAGE 3   

 117   1          goto stop;
 118   1      
 119   1        i2c_start();
 120   1      
 121   1        i2c_write(SA | 1); // Slave add with read instruction
 122   1        r = i2c_ack();
 123   1        if (r == 1)
 124   1          goto stop;
 125   1      
 126   1        temp = i2c_read();
 127   1        i2c_nack();
 128   1      
 129   1      stop:
 130   1        i2c_stop();
 131   1      
 132   1        return temp;
 133   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    238    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
